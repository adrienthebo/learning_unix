Scripting, or Doing Insane Things in Rapid Order
================================================

Description
-----------

Nobody likes performing repetitive tasks, and so if we have a series of commands
we want to run repeatedly then we can put them into a script. A script is a
file that contains a servies of commands and shell functions that can be

With all of these sections, use `nano`, `vim`, or whatever text editor you would
prefer to make these examples. If you're not sure, use `nano`.

If there's a code example given, transcribe it into your edit. Don't copy it;
pasting code into an editor can do strange things if you're not used to your
editor. In addition, the practice of writing code will make you more comfortable
in your environment.

Commands
--------

  - echo
  - test
    - notice that '[' is an alias of test. This is important.
    - This is also a little mind blowing.

Making a file executable
------------------------

In windows, a file is executable depending on the name. For instance, if a file
was named 'program.exe' you could run it, while if you renamed the file to
'program.jpg' it would not be runnable. In Unix, commands are executable if they
have permission to. Permissions will be explained in detail later, but for now
if you get something like this:

    % ./myprogram
    zsh: permission denied: ./myprogram

You should run `chmod a+x myprogram` to add the execute permission to the
program.

**Note**: Do not execute `chmod 777 [file]` in any case, until you know what
you're doing. If you do this I will fill up your entire unix quota.
  

A Basic Example
---------------

    #!/bin/bash
    echo "Hello world"

The Shebang
-----------

The shebang is the `#!/bin/bash` component of the previous script. It specifies
what command that the system should use to launch the script. The program listed
by the shebang is effectively 'fed' the script as an argument. Thus, if you
named the previous script "hello.sh", you could run it by doing `bash hello.sh`
or `./hello.sh`.



Flow Control, i.e. Making Decisions
-----------------------------------

- - -

Extra Credit
------------

Explain what would happen if you ran the following *scripts*. (Yes, these are
full scripts.)

    #!/bin/echo

- - -

    #!/usr/bin/yes

- - - 

    #!/bin/rm

Moar Extra Credit
-----------------

You'll see the shebangs `#!/usr/bin/env ruby` and `#!/usr/bin/ruby` floating
around in different scripts. However, they seemingly do the same thing. How do
they differ? Why would you use one over the other?

Hint: man env

I have too much free time and/or I am skipping classes to write code
--------------------------------------------------------------------

Write a printer script.

Then, write a runaway script.

This is all far too simple for me. I require monumental tasks.
--------------------------------------------------------------

PM finch. He has something evil.

References
----------

 - http://en.wikipedia.org/wiki/Shebang\_(Unix)
 - http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html

