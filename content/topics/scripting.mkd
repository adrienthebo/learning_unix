Bash Scripting
==============

Introduction
------------

Bash scripting is in essence programming, and trying to write a single, concise
document on programming is nearly impossible. There's a massive volume of
material  to cover, and people come in from all different skill levels so it's
difficult to address this.

To help keep this document a little bit shorter, you may want to consult the
following links. They are more comprehensive documents that really cover all the
particulars of bash programming, and should be an excellent complement to this
document.

 - [Bash Programming - the Linux Documentation Project](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html)

Description
-----------

Nobody likes performing repetitive tasks, and so if we have a series of commands
we want to run repeatedly then we can put them into a script. A script is a
file that contains a servies of commands and shell functions that can be

With all of these sections, use `nano`, `vim`, or whatever text editor you would
prefer to make these examples. If you're not sure, use `nano`.

If there's a code example given, transcribe it into your edit. Don't copy it;
pasting code into an editor can do strange things if you're not used to your
editor. In addition, the practice of writing code will make you more comfortable
in your environment.

Commands
--------

You have more commands to look up before we continue. Go do so now. I'll wait.

  - echo
  - test
    - notice that '[' is an alias of test. This is important.
    - This is also a little mind blowing.

If you didn't look them up I will eat your face.

Making a file executable
------------------------

In windows, a file is executable depending on the name. For instance, if a file
was named 'program.exe' you could run it, while if you renamed the file to
'program.jpg' it would not be runnable. In Unix, commands are executable if they
have permission to. Permissions will be explained in detail later, but for now
if you get something like this:

    % ./myprogram
    zsh: permission denied: ./myprogram

You should run `chmod a+x myprogram` to add the execute permission to the
program.

**Note**: Do not execute `chmod 777 [file]` in any case, until you know what
you're doing. If you do this I will fill up your entire unix quota. *YOUR.
ENTIRE. UNIX. QUOTA.*


A Basic Example
---------------

    #!/bin/bash
    echo "Hello world"

The Shebang
-----------

The [shebang][shebang] is the `#!/bin/bash` component of the previous script. It specifies
what command that the system should use to launch the script. The program listed
by the shebang is effectively 'fed' the script as an argument. Thus, if you
named the previous script "hello.sh", you could run it by doing `bash hello.sh`
or `./hello.sh`.

TODO more on shebang

[shebang]: http://en.wikipedia.org/wiki/Shebang\_(Unix) "Wikipedia - Unix Shebang"

Variables
---------

    #!/bin/bash
    myname=finch
    echo "Hello $myname"

TODO variable assignment

TODO difference between a=val and $a=val

Flow Control, i.e. Making Decisions
-----------------------------------

    #!/bin/bash
    if /bin/true
    then
      echo "Reality still functioning!"
    else
      echo "True is no longer true, I'm going to sit in a corner and cry."
    fi

TODO case statements

TODO short circuit operators

Loops, or doing the same thing really really fast
-------------------------------------------------

    #!/bin/bash
    for count in 1 2 3 4 5
    do
      echo "I have done this $count time(s)."
    done

- - -

    another_counter=""
    while [ "$another_counter" -ne "aaaa" ];
    do
      echo "My other counter is $another_counter"
      another_counter="${another_counter}a"
    end

TODO explain looping

- - -

Functions
---------

TODO

Extra Credit
------------

Explain what would happen if you ran the following *scripts*. (Yes, these are
full scripts.)

    #!/bin/echo

- - -

    #!/usr/bin/yes

- - -

    #!/bin/rm

Moar Extra Credit
-----------------

You'll see the shebangs `#!/usr/bin/env ruby` and `#!/usr/bin/ruby` floating
around in different scripts. However, they seemingly do the same thing. How do
they differ? Why would you use one over the other?

Hint: man env

I have too much free time and/or I am skipping classes to write code
--------------------------------------------------------------------

Write a printer script.

TODO specifics of printer script

Then, write a runaway script.

TODO specifics of runaway script

This is all far too simple for me. I require monumental tasks.
--------------------------------------------------------------

If you're reading these and haven't found anything challenging, PM me. I have
a particularly evil challenge for those who are interested.

