---
title: Bash Scripting
description: A brief introduction to automating work with scripts.
layout: post
---

Introduction
------------

Bash scripting is in essence programming, and trying to write a single, concise
document on programming is nearly impossible. There's a massive volume of
material  to cover, and people come in from all different skill levels so it's
difficult to address this.

To help keep this document a little bit shorter, you may want to consult the
following links. They are more comprehensive documents that really cover all the
particulars of bash programming, and should be an excellent complement to this
document.

 - [Bash Programming - the Linux Documentation Project](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html)

{::comment}
TODO more links that don't suck
{:/comment}

Description
-----------

Nobody likes performing repetitive tasks, and so if we have a series of commands
we want to run repeatedly then we can put them into a script. A script is a
file that contains a servies of commands and shell functions that can be

With all of these sections, use `nano`, `vim`, or whatever text editor you would
prefer to make these examples. If you're not sure, use `nano`.

If there's a code example given, transcribe it into your edit. Don't copy it;
pasting code into an editor can do strange things if you're not used to your
editor. In addition, the practice of writing code will make you more comfortable
in your environment.

Commands
--------

On top of the commands that you actually need to do the work in your script, you
need a few more commands to make the script itself work. Check out the man pages
on these commands. Go do so now. I'll wait.

  - **echo**
  - **read** (If you can't find the man page for this command, see [this page][man_read]
  - **seq**
  - **test**
    - notice that '**[**' is an alias of test. This is important.
    - This is also a little mind blowing.


[man_read]: http://ss64.com/bash/read.html "Bash syntax: read"

If you didn't look them up I will eat your face.

A Tangent - making files executable
-----------------------------------

In windows, a file is executable depending on the name. For instance, if a file
was named 'program.exe' you could run it, while if you renamed the file to
'program.jpg' it would not be runnable. In Unix, commands are executable if they
have permission to. Permissions will be explained in detail later, but for now
if you get something like this:

    % ./myprogram
    zsh: permission denied: ./myprogram

You should run `chmod a+x myprogram` to add the execute permission to the
program.

**Note**: Do not execute `chmod 777 [file]` in any case, until you know what
you're doing. If you do this I will fill up your entire unix quota. *YOUR.
ENTIRE. UNIX. QUOTA.*


A Basic Example
---------------

This is pretty much the most basic script that you'll ever see. When you put
this into a file and run it, it simply prints out "Hello world"

    #!/bin/bash
    echo "Hello world"

The Shebang
-----------

The [shebang][shebang] is the `#!/bin/bash` component of the previous script. It specifies
what command that the system should use to launch the script. The program listed
by the shebang is effectively 'fed' the script as an argument. Thus, if you
named the previous script "hello.sh", you could run it by doing `bash hello.sh`
or `./hello.sh`.

{::comment}
TODO more on shebang
{:/comment}

[shebang]: http://en.wikipedia.org/wiki/Shebang\_(Unix) "Wikipedia - Unix Shebang"

Comments
--------

To make your code more understable, you can embed comments into the code. This
allows you to make notes about why you're doing things a certain way. Anything
after a `#` will be ignored.

    #!/bin/bash
    # This is a comment. Technically, the previous line was a comment too.

    # We're going to print "Hello world" to the screen now
    echo "Hello world" #< - This starts an end of line comment

Variables
---------

A variable is similar to a mathematical variable, as in we effectively store a
value inside the variable, and then reference the variable to get at the value.
This allows us to create code that has more dynamic behavior.

This is the most basic example of using a variable: we set a variable, and then
use it in the `echo` statement.

    #!/bin/bash
    myname=finch
    echo "Hello $myname"

{::comment}
TODO variable assignment
{:/comment}

- - -

You can also use the `read` command to get input from the user. (You read the
man page, right?)

    #!/bin/bash

    echo "What's your name?"
    read your_name
    echo "Hello $your_name, I have some candy in my van - wait, is that Chris Hansen?"

- - -

Unlike mathematical variables, bash variables can be reassigned as many times as
you like.

    #!/bin/bash
    # Woo monty python!

    echo "WHAT is your name?"
    read var
    echo "Your name is $var"

    echo "WHAT is your quest?"
    read var
    echo "Your quest is $var"

    echo "WHAT is your favorite color?"
    # Blue! No! Green! No! AAAAAAaaaaaaaahhhhhhh
    read var
    echo "Your favorite color is $var"

    # Note that this is a bad example, we're reusing $var when we don't need to.
    # It's simply an easy way to demonstrate reassignment.

- - -

You can also do some more complex things when constructing variables.

### Interpolation

    #!/bin/bash
    one="first variable"
    two="second variable"
    onetwo="This is the wrong variable"

    # I want to print "first variabletwo"
    echo "$onetwo" # What will this be?

    echo "${one}two" # The braces disambiguate what variable we want

{::comment}
TODO difference between a=val and $a=val
TODO string concatenation
TODO parameter expansion
{:/comment}

These brace surrounded strings are what's known as [parameter
expansion][expansion], and The full explanation for these brace they're how you
do more complex manipulation of variables.

[expansion]: http://wiki.bash-hackers.org/syntax/pe "Bash parameter expansion"

Flow Control and Making Decisions
---------------------------------

One of the things you're going to have to do in more advanced scripts is make
decisions in your code. If you do the same thing every single time, that's a
fairly boring script, so let's make something more advanced.

The way scripts make decision is based on conditionals. There are three main
types of conditionals:

  - if statements
  - short circuit statements
  - case statements

TODO return codes

### if statements

The first condition is the `if` statement. The if statement takes a command, and
runs it. If the command returns 0, the condition is considered true. For
instance, `/bin/true` is a command whose only purpose is to return an exit
status of zero.

{::comment}
TODO exit status vs stdout
{:/comment}

    #!/bin/bash
    if /bin/true
    then
      echo "Reality still functioning!"
    else
      echo "True is no longer true, I'm going to sit in a corner and cry."
    fi

Here's a (slightly) less contrived example.

    #!/bin/bash
    # Woo pulp fiction!

    echo "ENGLISH MISTER FLUFFY, DO YOU SPEAK IT?"

    read answer

    if test "$answer" = "yes"
    then
        echo "WHAT DOES MARCELLUS WALLACE LOOK LIKE?"
    elif test "$answer" = "no"
    then
        echo "YO HABLA ESPANOL?"
    else
        echo "Wait, wait. What?"
    fi

{::comment}
TODO comparisons
{:/comment}

### short circuit operators

There are a series of what are known "short circuit operators", that are
equivalent to short if statements.

    # If this condition is true, run the following command
    /bin/true && echo "Reality still functioning!"
    # If this condition os *false*, run the following command
    /bin/true || echo "True is no longer true, I'm going to sit in a corner and cry."

TODO short circuit operators

- - -

### case statements

{::comment}
TODO case statements
{:/comment}

Case statements are effectively a series of `if []; then ...; elif []; then ...; fi`

    case `uname` in
    Linux)
        echo "Yay, not terrible"
        ;;
    FreeBSD)
        echo "Yay, still not terrible"
        ;;
    Darwin)
        echo "Egh, could be worse"
        ;;
    Solaris)
        echo "...there's ZFS at least"
        ;;
    AIX)
        echo "OH GOD WHYYYYYY"
        ;;
    *)
        echo "What kind of crazy system are you running?"
        ;;
    esac

- - -

Loops, repetition, reiteration, and other synonyms for repetition
-----------------------------------------------------------------

There are plenty of times that you'll find that you need to do the same thing
more than once. We can either copy and paste code, which is painful, or we can
use a loop.


For instance, we can loop over the numbers one through five.

    #!/bin/bash
    for count in 1 2 3 4 5
    do
      echo "I have done this $count time(s)."
    done

- - -

We can also use the output of a command for loop commands

    #!/bin/bash
    for count in `seq 1 5`
    do
      echo "I have done this $count time(s)."
    done

- - -

{::comment}
TODO loop over files
{:/comment}

We can also use the shell to do expansion of files

    #!/bin/bash
    # This is a cheap version of ls
    for file in *
    do
      echo "$file is a file in the current directory."
    done

- - -

We also have the `while` statement. While the `for` statement generally runs
over a set number of items, the `while` statement will run while a condition is
true. It's effectively a repetitive if statement.

    #!/bin/bash
    # If this isn't clear, put this in a file and run it.
    another_counter=""
    while [ "$another_counter" != "aaaa" ];
    do
      echo "My other counter is $another_counter"
      another_counter="${another_counter}a"
    end

{::comment}
This example sucks. Use example of a menu loop?

Alternately, repeated prompt?
{:/comment}

TODO explain looping

- - -

Functions
---------

TODO

{::comment}

Example of a function that creates a reusable repeated prompt?

{:/comment}

{::comment}
In Practice
-----------

Write bash replacements of commands.

cat - while read line; do echo line; done

ls - something

{:/comment}

Extra Credit
------------

Explain what would happen if you ran the following *scripts*. (Yes, these are
full scripts.)

    #!/bin/echo

- - -

    #!/usr/bin/yes

- - -

    #!/bin/rm

Moar Extra Credit
-----------------

You'll see the shebangs `#!/usr/bin/env ruby` and `#!/usr/bin/ruby` floating
around in different scripts. However, they seemingly do the same thing. How do
they differ? Why would you use one over the other?

Hint: man env

I have too much free time and/or I am skipping classes to write code
--------------------------------------------------------------------

Write a printer script.

TODO specifics of printer script

Then, write a runaway script.

TODO specifics of runaway script

This is all far too simple for me. I require monumental tasks.
--------------------------------------------------------------

See the [challenges page](../../challenges/).
