---
title: Surviving and Navigating the Filesystem
---

Surviving and Navigating the Filesystem
=======================================

Introduction
------------

This is going to be a bit of a crash course on surviving in unix. This should
run over the basics of filesystems, how to get around, run commands, and
inspect files and programs.

- - -

The filesystem
--------------

The filesystem is a representation of what is on your system, and contains
things like directories, programs, libraries, documents, and other
things. We represent this as a tree structure, where we have a directory
called the **root** directory that holds a set of files and directories, and these
directories successively have more contents.

A simplified version of the cat filesystem on a normal computer would look
something like this:

    /
    ├── bin
    ├── boot
    ├── cat
    │   ├── bin
    │   │   ├── akimbo
    │   │   ├── cancelall
    │   │   ├── grouplist
    │   │   ├── :q
    │   │   ├── qotd
    │   │   ├── netgrouplist
    │   │   └── why
    │   └── doc
    │       ├── meetings
    │       │   ├── agenda.dog
    │       │   └── agenda.splatnix
    │       └── formletters
    ├── etc
    ├── dev
    ├── lib
    ├── proc
    ├── u
    │   ├── finch
    │   │   ├── local
    │   │   │   ├── bin
    │   │   │   └── lib
    │   │   ├── .profile
    │   │   ├── .zshrc
    │   │   └── .zshenv
    │   └── troll
    │       ├── evil
    │       ├── lulz
    │       └── miley_cyrus
    ├── usr
    └── var

Now that we have a massive blob of text, let's break this apart.

The root directory
------------------

    / <------ This is the root directory
    ├── bin
    ├── boot
    ├── cat
    │   ├── bin
    │   │   ├── akimbo
    │   │   ├── cancelall
    ...

Let's first start discuss the concept of a root directory. In a general sense,
the root directory would be the directory that contains all other directories,
and if you were to represent directories as branches in a tree, the root
directory would be at the root of the tree.

In Windows, the 'root' of the normal filesystem would be considered 'C:\\', and
in there you would have directories like this:

 * Users and Settings
 * Program Files
 * Windows

You might have other drives like D:\ and others. Each drive would be the root,
or base level of a filesystem.

Unix has some similar concepts to this. In unix, there's one base
filesystem, and it starts at '/'. from. In unix, we don't have multiple roots
like Windows does with 'C:\\' and 'D:\\', and instead individual hard drives are
more or less hidden, so you don't really have to know what files are stored
where.

A brief overview of what's in the root directory would be something like this:

  * **/bin**: Short for 'binaries', this is where programs can be found. This is
            somewhat like 'Program Files'.
  * **/etc**: Short for 'et cetera', this is where configuration files for the
            system are found. This is somewhat like 'Windows'.
  * **/home** and **/u**: On cat systems we call this **/u**, elsewhere it's
            called **/home**. This is where your home directory is; it's
            similar to 'Users and Settings'. We'll talk about this in more
            detail later.

As you can see, while things have different names and may be in different
places, there's a fair bit in common with Windows and unix. It isn't *entirely*
foreign, right?

Admittedly, there are obviously many other directories that I'm not mentioning,
but we'll get to all of those later.

Your home directory
-------------------

    /
    ...
    ├── lib
    ├── u <----- This is where all home directories are stored
    │   ├── finch <----- This is finch's home directory
    │   │   ├── local
    │   │   │   ├── bin
    │   │   │   └── lib
    │   │   ├── .profile
    │   │   ├── .zshrc
    │   │   └── .zshenv
    │   └── troll <----- This is troll's home directory
    │       ├── evil
    │       ├── lulz
    │       └── miley_cyrus
    ...

You may be familiar with your own home directory in Windows, where you had
directories like 'My Documents,' 'My Pictures,' 'Desktop,' and other such files
and directories. In unix, this is called your home directory, or homedir for
short. When you log into a system, either graphically or from the command line,
you'll usually start here.

This is *your* space; you can do pretty much whatever you would like here. For
instance, your personal configuration files are stored here, although they're
hidden by default. (We'll talk about looking at these files later.) You can also
do things like keep the programs and scripts you've written in here, or install
other programs into your home directory.  And of course, you can put pretty
much whatever you want here, as long as it isn't too big.


Paths
-----

    /
    ...
    ├── lib
    ├── u <----- This would be '..' relative to /u/troll
    ...
    │   └── troll <----- If we are here, aka /u/troll, this would be '.'
    │       ├── evil
    │       ├── lulz
    │       └── miley_cyrus <---- This would be './miley_cyrus'
    ...

We call the location of a file in the filesystem the 'path' to the file. For
instance, the path to the home directory for the `miley_cyrus` directory in
troll's homedir would be `/u/troll/miley_cyrus`. This would be also called an
absolute path, because the entire path is given from `/`.

In contrast, if we were in troll's home directory, the path to that same
directory would just be `miley_cyrus`. Since we're already in `/u/troll` we can
simply access that directory instead of giving the absolute path, since it's
shorter. Since this is relative to our current location, this would be called a
relative path.

While we're talking about relative paths, there are a couple special values:
`'.'`, `'..'`. and `'~'`.

 * `'.'` refers to the current directory, so `.` would be `/u/troll` if we were in
   that directory. This means that you could also refer to `miley_cyrus` as
   `./miley_cyrus` if you were in `/u/troll`.

 * `'..'` is the parent directory, or the directory that contains the current
   directory, so `..` would be `/u` if we were in `/u/troll`.

 * Your home directory is fairly important, so you'll find yourself navigating
   between it and the rest of the system. Since it's so common, there's a
   shortcut to your home directory, `'~'`. You may find that paths start with `~`
   instead of `/`, which just means that they're based out of your home
   directory. For instance, `/u/troll` would be referred to as `~`.

Running programs
----------------

    /
    ...
    ├── u
    │   └── finch
    │       ├── local
    │       │   ├── bin <----- This is is where finch keeps his programs
    │       │   │   ├── git-new-workdir
    │       │   │   ├── git-search-tags
    │       │   │   ├── sprunge
    │       │   │   └── stow
    │       │   └── lib
    │       ├── .profile
    │       ├── .zshrc
    │       └── .zshenv
    ...
    └── bin
        ├── bash
        ├── cat
        ├── cp
        ├── date
        ├── ls
        └── zsh

Obviously, at some point you'll want to actually *do* something. To get things
done, you'll have to start running programs. To run a program, all you have to
do is give the path to the file. For instance, we have
`/u/finch/local/bin/git-new-workdir`, so to run it all we do is put that
filename in our shell and hit enter. Any other program in that directory could
be executed, as well as anything /bin, such as `/bin/ls` and `/bin/cat`.

However, typing out such lengthy paths is obviously going to get old fast, so
there's a shortcut. There's a set of directories like /usr/bin and /bin whose
programs you can launch without typing out the full path. That's why you can do
`ls` instead of `/bin/ls`. We'll go into how this works at a later date.

- - -

The Fun Begins
--------------

/cat is the location that cat specific documents, programs, and other
miscellaneous files are stored. It's been around for a very long time, so there
are some old relics of times past. We'll explore this to get some real world
experience.

We mainly care about this part of the filesystem:

    /
    ...
    ├── cat
    │   ├── bin
    │   │   ├── akimbo
    │   │   ├── cancelall
    │   │   ├── grouplist
    │   │   ├── :q
    │   │   ├── qotd
    │   │   ├── netgrouplist
    │   │   └── why
    │   └── doc
    │       ├── meetings
    │       │   ├── agenda.dog
    │       │   └── agenda.splatnix
    │       └── formletters
    ...


From here on out, you should be doing this from a cat machine. Connect to
ruby.cat.pdx.edu via putty and work from there.

Before we charge into the hands on portion of this with all guns blazing, we
need to know our weapons.

The Manual, or Man Pages
------------------------

In ye Olde Goode Days, Unix quite literally came with a manual that was about a
foot or so wide. Today, instead of carting thirty or so pounds of documentation
around with us, the manual, or [man pages][manpages], are now available on almost all
systems with the 'man' command. For instance, if you were to run `man man`, this
would bring up the man page for the man command. Reading the man page for the
man pages would be a good place to start.

[manpages]: http://en.wikipedia.org/wiki/Man_page "Wikipedia: Man Page"

It's important to note how man pages actually work. The man command itself
mainly focuses on fetching and properly formatting the man page itself, but on
linux systems `man` would then hand the document over to a different command,
`less` to actually show it. Less is what is known as a 'pager', so given a very
long document less will allow you to scroll through the document a page on the
time.

There are a few points to note about less:

 * To exit, hit 'q'
 * Normal arrow keys work (sometimes things can be intuitive)
 * At the same time, a lot of vim keybindings also work with vim, such as hjkl. (Yay!)

From here on out, I generally won't do comprehensive explanations of commands
because it's time consuming, and the man pages are effectively the main form of
documentation for commands. Since you'll be reading a lot of man pages, practice
reading them will help. However, Marut put this best:

> yeah. manpages are tools designed for experts. it's like you need at least 5
> ranks in "Knowledge (unix)" before the manpages are really helpful.  But once
> you get the background and figure out how to read them, they're awesome and
> often the best resource for learning a new tool or application.

In the case you run into a man page that makes NO sense whatsoever, and this
isn't uncommon, ask another cat or finch for help deciphering the man pages.

Commands to Know
----------------

Before you ride into battle, know your weapons.  Open the man page for each one
of the commands by doing `man [command]`; for instance `man ls` will bring up the
man page for ls. Read a bit; man pages can be extremely dense, jargon filled,
and unclear so if you lose interest, move on.  Try to read a bit of the
description at the least.

  - **less**: I've already briefly touched on less, but it wouldn't hurt to go
    back and read the actual man page for less.
  - **ls**: list files and directories
    - This command has an obscene amount of flags. Skim through, find one that
      is interesting/useful/odd/something, and explain it to me.
  - **pwd**: print the working directory, or where we are in the filesystem.
  - **cat**: takes files and prints them out together
  - **file**: shows what type a file is, EG a document, music file, or executable binary

cd is a special command; it's called a shell builtin. It isn't a standard
program but actually a tool that is built into your shell. If you can't find the
man page for it, you can consult http://ss64.com/bash/cd.html

- - -

From here on out this will be a little bit less verbose and will give you more
of a chance to explore. Try to find interesting things and go beyond the
assignment. Look at everything. Poke into nooks and crannies. The more you
explore, the more things will make sense.

Alright, enough talk. Let's do this.

- - -

/cat/doc
--------

Start off by doing `cd /cat/doc`. Do `ls` here. This is where we store general
documents like signs and forms.

Do `cd /cat/doc/meetings`. Do `ls` to see all the current agendas.

Print out the dog agenda with `cat agenda.dog`. This might take a while.

Do `pwd`, then `cd old`, then `pwd`. See how our location in the filesystem
changed. Do `ls` to look at the old agendas. do `cat [agenda]` on a few agenda
files to see what we used to be up to. Do `ls -l` to see when these files were
made.

Do `cd ..` to go back to /cat/doc/meetings. Do `less agenda.dog` to open up the
dog agenda. Use the up and down arrows to move through the file. Scroll down to
Fri Sep 05 1997 and tell me who was absent that Friday. When you're done, quit
less by hitting 'q'.

/cat/bin
--------

Do `cd /cat/bin`. This is where we store random tools that should be shared. Do
`ls` to see what tools are available. Do `ls -l` to see the dates on the files.

Pick a few files in this directory, and do `file [filename]` to see what kind of
file it is. If you see anything like "ELF 32-bit MSB executable," don't try to
cat or 'less' it. If you see something like "shell script text executable" or
anything with "text" in it, you can open it with less or cat. Open a few files,
with cat or less and look at their contents.

Some of the files you can open are fairly elaborate scripts. Try to find the
simpler files, like `akimbo` or `why`.

To remind us where we are, do `pwd` to see where we are, then run `./akimbo` and
`./why`. Also do `/cat/bin/why` and compare this. Remember the significance of
'.' and '..'. If you don't recall, ask.

Find something interesting in this directory. Send details to me.

I've thrown a few gag programs into /cat/bin. Use ls with the long listing flag
to find which of these files I've created. If you don't know how to do the long
listing, check the man page or ask for help. Send me the names of the files
I've made.

The Disorganized Rest
---------------------

Now that we've walked through a couple of directories, I'm handing this off to
you. Go forth into the following directories and explore.

 * /cat/folklore
 * /cat/games
 * /cat/lib
 * /cat/man
 * /cat/share
 * /cat/src

- - -

Extra credit
------------

Hunner and Kennobaka are a pair of old splatnix claws that have since found
greener pastures, but back in the day they wrote a lot of code. Go to their
homedirs, /home/linux/hunner, /home/solaris/hunner, /home/linux/fellina, and
home/solaris/fellina, and find something interesting.

Hints:

  - /home/linux/fellina/printers
  - /home/linux/hunner/scripts

Moar extra credit
-----------------

Find the secret agenda.

Super fun omg extra credit
--------------------------

Due to a strange series of events, most solaris machines share a common
/usr/local. It has some old stuff. Really old. ssh to scalpel.cat.pdx.edu, `cd
/usr/local` and find something REALLY old. The older the better. The weirder the
better. Report back to me.

Hint: the find command can be used to search file files by type and time last
modified.
